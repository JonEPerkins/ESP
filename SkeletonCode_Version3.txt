#include "mbed.h"
#include "C12832.h"//lcd screen library
#include "QEI.h"//encoder library

// Sets up the GPIO as output
DigitalOut enable(PB_4); 

// Sets up the centre button
InterruptIn centre(D4);

// Motor 2 - Left Wheel (Duty Cycle: Forward-- >50%)
DigitalOut motor2_bipolar1(PB_3);
PwmOut motor2_pwm1(PC_8);


// Motor 1 - Right Wheel (Duty Cycle: Forward-- <50%)
DigitalOut motor1_bipolar2(PB_5);
PwmOut motor1_pwm2(PC_6);


// Encoder (QEI (PinName channelA, PinName channelB, PinName index, int pulsesPerRev, Encoding encoding = X2_ENCODING))
QEI wheel_2 (PC_4, PB_1, NC, 512); 
QEI wheel_1 (PC_2, PC_3,NC, 512);

//Input readings from Line Sensor
AnalogIn reading1(PC_4);
AnalogIn reading2(PC_5);
AnalogIn reading3(PA_4);
AnalogIn reading4(PB_0);
AnalogIn reading5(PC_1);
AnalogIn reading6(PC_0);

//BLE Connections and definitions
Serial hm10(PA_11, PA_12); // UART6 TX,RX - bluetooth connection to buggy

int StopProcessType; //if the value reads 0, the buggy stops for any reason except BLE trigger
                    //if the value is 1, it is due to the BLE process being triggered. 


//float lsreadings[6] = {};//array of readings from line sensor                             <-------NOTE: MAY BE DONE IN LOOP, SO REMOVE IF UNCESSARY

//Initial values for the control algorithm
float kp=0.0002, ki=0, kd=0, dt=0.5, mDiff, currentError;
static float prevError = 0;
float proportional, integral=0, derivative;



//End process global variable, called if the buggy wants to stop the run it is currently carrying out. 
int EndRun = 0;


void DaylightFiltering(){ //daylight filtering function

    //PROCESS TO FILTER DAYLIGHT GOES HERE, VOID AS IT DOES NOT RETURN ANYTHING                 <--------NOTE: MAY BE DONE IN LOOP, SO REMOVE IF UNECESSARY
    float value = reading1.read();   
    float value2 = reading2.read();       
    float value3 = reading3.read();   
    float value4 = reading4.read();       
    float value5 = reading5.read();   
    float value6 = reading6.read();        

}

float ControlAlgo(float in1, float in2, float in3, float in4, float in5, float in6){
        //CONTROL ALGORITHM SHOWN HERE
        float pos = ( (0*in1 + 1000*in2 + 2000*in3 + 3000*in4 + 4000*in5 + 5000*in6)/(in1 + in2 + in3 + in4 + in5 + in6));
        printf("position is %.3f\n", pos); //pos is from 0 to 5000 where 0 is the first sensor and 5000 the last, 2500 is the centre line
        currentError = pos-2500;
        printf("error is %.3f\n", currentError);
        proportional = currentError;
        integral = integral + currentError * dt;
        derivative = (currentError-prevError)/dt;
        mDiff = kp*proportional + ki*integral + kd*derivative;
        printf("motor diff is %.3f", mDiff);
        prevError = currentError;
        wait(dt);
        return mDiff;
};

void WheelControl(float pwmvalue){
    //PWM OUTPUT TO WHEELS GOES HERE--half of the pwm output goes to each wheel to provide differential steering.
    float diffSteer = pwmvalue/2;

    motor1_pwm2.write(0.5+diffSteer);
	motor2_pwm1.write(0.5+diffSteer);
}

 void LineBreakFunction(){                                                                                //<----------
    //initiate process of reading circumference of wheel. 


};

void SlopeDetection(){//measure the speed of the wheel and determiune if it is going                      <---------
//up or down a slope or is on flat ground
//return to while loop to determine what to do next
}





void BLE_180(){//interrupt process called and stopppingprocess carried out.                                   <------
                    //if the stopping process was called by the interrupt this function is called 
                    //to turn the vehicle around. 

        //To measure the point where the line is being read AGAIN, rotate by 90 degrees first AND THEN being loop to read line in reverse direction

        //create a while loop to measure the line sensor until the value is close to 2500


        //(the middle point). Once that point has been detected, leave the while loop and return to 
        //the main code. 

}



void StoppingProcess(int stopvalue){//called if the BLE proceess is triggered or the line break function has ended.       <------
    motor1_pwm2.write(0.5);//stop right wheel
	motor2_pwm1.write(0.5);//stop left wheel

    if (stopvalue == 1){
        BLE_180();
    }
    else{
        EndRun = 1; //stops the buggy operating as it reaches the end of the line due to a line break that is the end of the line. 
    }
}




int main() {
    //Initial Configuration of Motor+Wheels
    // Drive board enabled
    enable = 0;
    // Motor 1 and motor 2 set to bipolar mode
    motor2_bipolar1 = 1;
    motor1_bipolar2 = 1; 

    // PWM frequency is set to 1000 Hz
    motor1_pwm2.period(0.001f);
    motor2_pwm1.period(0.001f);
    


    //Begin while loop when initial reading of line has been detected               <-----
    //i.e when reading is close to 2500

    float value = reading1.read();   
    float value2 = reading2.read();       
    float value3 = reading3.read();   
    float value4 = reading4.read();       
    float value5 = reading5.read();   
    float value6 = reading6.read();
    
    float pwmout = ControlAlgo(value, value2, value3, value4, value5, value6);
    if(pwmout>2000 || pwmout < 3000){
    
        while(EndRun == 0) {//so long as EndRun is 0, this loop carries out. 

            //BLE PROCESS DETECTION AND OPERATION
            char code; // Data packet for BLE sensor
            hm10.baud(9600);

            if (hm10.readable()) {

                code = hm10.getc(); // Read a single character

                if (code == 'a') {//if this value is read by the buggy module, being the StoppingProcess
                    StopProcessType = 1;
                    StoppingProcess(StopProcessType);

                }
            }   

            //GET READINGS FROM SENSOR--(ignore process of daylight filtering until new PCB assembled)
            value = reading1.read();   
            value2 = reading2.read();       
            value3 = reading3.read();   
            value4 = reading4.read();       
            value5 = reading5.read();   
            value6 = reading6.read();

            float valuearr[6] = {value, value2, value3, value4, value5, value6};//array of values for 
                                                                                //data processing



                                                                                
            //switch off the emitter of the TCRT to get the readings and place values into another 1d array     <------
            //of size 6

            //subtract values of the second array from the first array to receive the true readings of the line
            //pass along these values to the contorl algorithm below. 

            pwmout = ControlAlgo(value, value2, value3, value4, value5, value6);


            //if pwmout is smaller or larger than some specific intervals, then the line is not being read          <-----
            //so, go to line break function and begin a measurement of the circumference of the wheel to measure the
            //distance travelled by the buggy.

            //pass along the previously stored values from the previous iteration to use in this run to keep the buggy going the way it was. 
            //use a conditional statement for the assignment of a value to pwmout depending on this value's reading.  



            //if pwmout is again not reading the line still, compare how large the value of the distance travelled by the buggy is
            //if the value is greater than the acceptable distance, carry out StoppingProcess() for the buggy as the line break is 
            //the end of the line. 

            //otherwise, continue the loop again and then check to see if the value is being measured once more. If it is, set the 
            //measurement value to zero and sotp measuring the circumference of the wheel to stop the measuring process. 




            //Measure speed of wheels to detect slope here before passing on value                  <----------
            //if incline slope present, i.e. average speed is lower than usual: 
            //WheelControl(pwmout*increase in value)//speed up buggy
            //if decline slope present, i.e average speed is greater than usual: 
            //WheelControl(pwmout*decrease in value)
            //otherwise: just pass along pwmout value as it is.
            WheelControl(pwmout);

        }   
    }
    else{
        return 0;
    }
    return 0;
};